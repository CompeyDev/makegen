use serde::Deserialize;
use std::{fmt::Write, fs};
use toml::{self, value::Array, Value};

const MAKEFILE_COMMENT_HEADER: &str = r#"# WARNING:
# This file is automatically generated by makegen.
# It is not intended for manual editing.

"#;

const MAKEFILE_HEADER: &str = r#"check_defined = \
$(strip $(foreach 1,$1, \
    $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
$(if $(value $1),, \
    $(error Mandatory argument $1$(if $2, ($2))$(if $(value @), \
            not provided. Required by target `$@`)))

log_prefix := \x1b[34m[\u001b[0m\x1b[31m*\x1b[34m\x1b[34m]\u001b[0m
command_prefix := \x1b[34m[\u001b[0m\x1b[31m\#\x1b[34m\x1b[34m]\u001b[0m

"#;

// Future QoL updates will include schema checks before parsing the 
// config ;)

// struct Variable {
//     required: bool,
//     description: String
// }

// struct Step {
//     log: String,
//     command: String
// }

// #[derive(Deserialize, Debug, Clone)]
// struct Target {
//     variables: Variable,
//     steps: Array<Step>,
// }

#[derive(Deserialize, Debug, Clone)]
#[allow(dead_code)]
struct Config {
    windows: toml::value::Table,
    linux: toml::value::Table,
}

fn main() {
    let config_contents = fs::read_to_string("./makegen.toml")
        .expect("No config found in current working directory, aborting.");

    let config: Config = toml::from_str(config_contents.as_str())
        .expect("Failed to parse config. Does it follow proper syntax?");

    #[cfg(target_os = "windows")]
    let runtime_config = &config.windows.clone();

    #[cfg(target_os = "linux")]
    let runtime_config = &config.linux.clone();

    let mut makefile_contents = String::new();
    let mut pre_target_variables_check = String::new();

    for (target, steps_values) in runtime_config {
        let variables_iter: Array = steps_values
            .get("variables")
            .unwrap()
            .as_array()
            .unwrap()
            .to_owned();


        // we need to cast Value into toml::value::Table
        for var in variables_iter {
            // I really love O(n^2). So cool.
            // If you have a better way of doing this, please lmk.
            let var_meta  = match var {
                Value::Table(table) => table,
                _ => panic!("out of bounds value type! Does the configuration follow the required syntax?")
            };

            for (variable_name, variable_details) in var_meta {
                if variable_details.get("required").unwrap().as_bool().unwrap() == true {
                    write!(
                        pre_target_variables_check,
                        "	@:$(call check_defined, {}, {})\n",
                        variable_name,
                        variable_details.get("description").unwrap()
                    ).unwrap();
                }
            }
        }

        let steps_iter: Array = steps_values
            .get("steps")
            .unwrap()
            .as_array()
            .unwrap()
            .to_owned();

        for step in steps_iter {
            let formatted = format!(
                "	@echo -e \"${{log_prefix}} {}\"\n	@echo -e \"${{command_prefix}} {}\"\n	@{}",
                step.get("log").unwrap(),
                step.get("command").unwrap(),
                step.get("command").unwrap().as_str().unwrap()
            );

            write!(&mut makefile_contents, "{}\n", formatted).expect("real");
        }

        makefile_contents.insert_str(0, format!("{}\n", pre_target_variables_check).as_str());
        makefile_contents.insert_str(0, format!("\r{}:\n", target).as_str());
    }

    makefile_contents.insert_str(0, MAKEFILE_HEADER);
    makefile_contents.insert_str(0, MAKEFILE_COMMENT_HEADER);

    fs::write("./Makefile", makefile_contents).unwrap();
}
